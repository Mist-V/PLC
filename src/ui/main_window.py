import customtkinter as ctk
from src.ui.auth_frame import AuthFrame
from src.ui.tasks_frame import TasksFrame
from src.ui.habits_frame import HabitsFrame
from src.ui.library_frame import LibraryFrame
from src.ui.calendar_frame import CalendarFrame
from src.services.auth_service import AuthService
from src.config import Config

class MainWindow(ctk.CTk):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    def __init__(self):
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MainWindow...")
        super().__init__()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        self.auth_service = AuthService()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("Life Manager")
        self.geometry(f"{Config.WINDOW_WIDTH}x{Config.WINDOW_HEIGHT}")
        self.minsize(800, 600)

        print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞...")
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.navigation_frame = ctk.CTkFrame(
            self,
            corner_radius=Config.CORNER_RADIUS["regular"],
            width=250
        )
        self.navigation_frame.pack(
            side="left",
            fill="y",
            padx=Config.PADDING["regular"],
            pady=Config.PADDING["regular"]
        )
        self.navigation_frame.pack_propagate(False)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–µ
        self._setup_theme()

        print("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_frame = ctk.CTkFrame(
            self,
            corner_radius=Config.CORNER_RADIUS["regular"],
            fg_color=("gray95", "gray10")
        )
        self.content_frame.pack(
            side="right",
            fill="both",
            expand=True,
            padx=Config.PADDING["regular"],
            pady=Config.PADDING["regular"]
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        self.create_navigation()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–æ–≤
        self.frames = {}
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—Ä–µ–π–º–æ–≤...")
        self.setup_frames()

        print("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞...")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ—Ä–µ–π–º
        self._show_initial_frame()
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MainWindow –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _setup_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
        header_frame = ctk.CTkFrame(
            self.navigation_frame,
            fg_color="transparent"
        )
        header_frame.pack(fill="x", padx=Config.PADDING["regular"], pady=Config.PADDING["regular"])

        # –õ–æ–≥–æ—Ç–∏–ø
        logo_label = ctk.CTkLabel(
            header_frame,
            text="Life Manager",
            font=(Config.FONT_FAMILY, Config.FONT_SIZES["large"], "bold")
        )
        logo_label.pack(side="left", padx=Config.PADDING["small"])

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        self.theme_button = ctk.CTkButton(
            header_frame,
            text="üåì",
            width=45,
            height=45,
            corner_radius=Config.CORNER_RADIUS["regular"],
            command=self._toggle_theme,
            fg_color="transparent",
            hover_color=("gray85", "gray20")
        )
        self.theme_button.pack(side="right", padx=Config.PADDING["small"])

    def _toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–º–Ω–æ–π –∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–æ–π"""
        if ctk.get_appearance_mode() == "Dark":
            ctk.set_appearance_mode("Light")
        else:
            ctk.set_appearance_mode("Dark")

    def create_navigation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫...")
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ctk.CTkFrame(
            self.navigation_frame,
            height=2,
            fg_color=("gray85", "gray20")
        )
        separator.pack(fill="x", padx=Config.PADDING["regular"], pady=Config.PADDING["regular"])

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "auth"),
            ("–ó–∞–¥–∞—á–∏", "tasks"),
            ("–ü—Ä–∏–≤—ã—á–∫–∏", "habits"),
            ("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", "library"),
            ("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", "calendar")
        ]

        for text, frame_name in buttons:
            btn = ctk.CTkButton(
                self.navigation_frame,
                text=text,
                command=lambda name=frame_name: self.show_frame(name),
                font=(Config.FONT_FAMILY, Config.FONT_SIZES["regular"]),
                corner_radius=Config.CORNER_RADIUS["regular"],
                height=Config.BUTTON["height"],
                hover_color=Config.DARK_THEME["accent_hover"] if ctk.get_appearance_mode() == "Dark" else Config.LIGHT_THEME["accent_hover"]
            )
            btn.pack(
                pady=Config.PADDING["small"],
                padx=Config.PADDING["regular"],
                fill="x"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞
        bottom_separator = ctk.CTkFrame(
            self.navigation_frame,
            height=2,
            fg_color=("gray85", "gray20")
        )
        bottom_separator.pack(fill="x", padx=Config.PADDING["regular"], pady=Config.PADDING["regular"], side="bottom")

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        self.logout_button = ctk.CTkButton(
            self.navigation_frame,
            text="–í—ã–π—Ç–∏",
            command=self._handle_logout,
            font=(Config.FONT_FAMILY, Config.FONT_SIZES["regular"]),
            corner_radius=Config.CORNER_RADIUS["regular"],
            height=Config.BUTTON["height"],
            fg_color=Config.DARK_THEME["error"] if ctk.get_appearance_mode() == "Dark" else Config.LIGHT_THEME["error"],
            hover_color=("red", "darkred")
        )
        self.logout_button.pack(
            pady=Config.PADDING["regular"],
            padx=Config.PADDING["regular"],
            side="bottom",
            fill="x"
        )
        self._update_navigation_state()

    def setup_frames(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–æ–≤"""
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        self.frames = {
            "auth": AuthFrame(self.content_frame, self),
            "tasks": TasksFrame(self.content_frame, self),
            "habits": HabitsFrame(self.content_frame, self),
            "library": LibraryFrame(self.content_frame, self),
            "calendar": CalendarFrame(self.content_frame, self)
        }
        print("–í—Å–µ —Ñ—Ä–µ–π–º—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    def _show_initial_frame(self):
        """–ü–æ–∫–∞–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if self.auth_service.is_authenticated():
            self.show_frame("tasks")
        else:
            self.show_frame("auth")

    def _update_navigation_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        is_auth = self.auth_service.is_authenticated()
        self.logout_button.configure(state="normal" if is_auth else "disabled")

    def _handle_logout(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.auth_service.logout()
        self._update_navigation_state()
        self.show_frame("auth")

    def show_frame(self, frame_name: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞"""
        print(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä–µ–π–º: {frame_name}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if frame_name != "auth" and not self.auth_service.is_authenticated():
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            frame_name = "auth"

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏,
        # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ tasks
        if frame_name == "auth" and self.auth_service.is_authenticated():
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º tasks")
            frame_name = "tasks"

        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã
        for frame in self.frames.values():
            frame.pack_forget()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ—Ä–µ–π–º
        frame = self.frames[frame_name]
        frame.pack(fill="both", expand=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self._update_navigation_state()
        print(f"–§—Ä–µ–π–º {frame_name} –æ—Ç–æ–±—Ä–∞–∂–µ–Ω")