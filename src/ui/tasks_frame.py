import customtkinter as ctk
from src.services.task_service import TaskService
from src.services.ai_service import AIService
from src.config import Config

class TasksFrame(ctk.CTkFrame):
    """
    –§—Ä–µ–π–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
    """
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.task_service = TaskService()
        self.ai_service = AIService()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.current_status = None
        self.current_sort_by = "priority"
        self.current_sort_order = "desc"

        self.create_widgets()
        self.tasks = []

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_frame = ctk.CTkFrame(self)
        self.stats_frame.pack(fill="x", padx=10, pady=5)
        self.create_stats_widgets()

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top_panel = ctk.CTkFrame(self)
        top_panel.pack(fill="x", padx=10, pady=5)

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_entry = ctk.CTkEntry(
            top_panel,
            placeholder_text="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..."
        )
        self.search_entry.pack(side="left", fill="x", expand=True, padx=5)
        self.search_entry.bind("<KeyRelease>", lambda e: self.refresh_tasks())

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_label = ctk.CTkLabel(top_panel, text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:")
        sort_label.pack(side="left", padx=5)

        self.sort_var = ctk.StringVar(value="priority")
        sort_menu = ctk.CTkOptionMenu(
            top_panel,
            values=["priority", "created_at"],
            variable=self.sort_var,
            command=lambda _: self.refresh_tasks()
        )
        sort_menu.pack(side="left", padx=5)

        # –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.order_var = ctk.StringVar(value="desc")
        order_menu = ctk.CTkOptionMenu(
            top_panel,
            values=["desc", "asc"],
            variable=self.order_var,
            command=lambda _: self.refresh_tasks()
        )
        order_menu.pack(side="left", padx=5)

        # –ü–æ–ª–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        task_panel = ctk.CTkFrame(self)
        task_panel.pack(fill="x", padx=10, pady=5)

        self.task_entry = ctk.CTkEntry(
            task_panel,
            placeholder_text="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
        )
        self.task_entry.pack(side="left", fill="x", expand=True, padx=5)

        # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        self.description_entry = ctk.CTkEntry(
            task_panel,
            placeholder_text="–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        )
        self.description_entry.pack(side="left", fill="x", expand=True, padx=5)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        ctk.CTkButton(
            task_panel,
            text="–ü—Ä–æ—Å—Ç–∞—è",
            command=lambda: self.add_task("simple")
        ).pack(side="left", padx=5)

        ctk.CTkButton(
            task_panel,
            text="–°—Ä–æ—á–Ω–∞—è",
            command=lambda: self.add_task("urgent")
        ).pack(side="left", padx=5)

        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        self.tasks_frame = ctk.CTkScrollableFrame(self)
        self.tasks_frame.pack(fill="both", expand=True, padx=10, pady=5)

        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        self.create_status_filters()

    def create_stats_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats_labels = {
            "total": ctk.CTkLabel(self.stats_frame, text="–í—Å–µ–≥–æ: 0"),
            "completed": ctk.CTkLabel(self.stats_frame, text="–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 0"),
            "in_progress": ctk.CTkLabel(self.stats_frame, text="–í —Ä–∞–±–æ—Ç–µ: 0"),
            "completion_rate": ctk.CTkLabel(self.stats_frame, text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ: 0%")
        }

        for label in self.stats_labels.values():
            label.pack(side="left", padx=10)

    def create_status_filters(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        filter_frame = ctk.CTkFrame(self)
        filter_frame.pack(fill="x", padx=10, pady=5)

        statuses = [None, "new", "in_progress", "completed", "cancelled"]
        status_names = ["–í—Å–µ", "–ù–æ–≤—ã–µ", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", "–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ"]

        for status, name in zip(statuses, status_names):
            ctk.CTkButton(
                filter_frame,
                text=name,
                command=lambda s=status: self.set_status_filter(s),
                width=100
            ).pack(side="left", padx=2)

    def set_status_filter(self, status):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        self.current_status = status
        self.refresh_tasks()

    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        current_user = self.controller.auth_service.get_current_user()
        if not current_user:
            return

        stats = self.task_service.get_task_statistics(current_user.id)

        self.stats_labels["total"].configure(text=f"–í—Å–µ–≥–æ: {stats['total']}")
        self.stats_labels["completed"].configure(text=f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}")
        self.stats_labels["in_progress"].configure(text=f"–í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}")
        self.stats_labels["completion_rate"].configure(
            text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completion_rate']:.1f}%"
        )

    def add_task(self, task_type: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        title = self.task_entry.get()
        description = self.description_entry.get()

        if not title:
            return

        current_user = self.controller.auth_service.get_current_user()
        if not current_user:
            return

        task = self.task_service.create_task(
            user_id=current_user.id,
            title=title,
            description=description,
            task_type=task_type
        )

        self.task_entry.delete(0, "end")
        self.description_entry.delete(0, "end")
        self.refresh_tasks()

    def create_task_widget(self, task):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        frame = ctk.CTkFrame(self.tasks_frame)
        frame.pack(fill="x", padx=5, pady=2)

        # –°—Ç–∞—Ç—É—Å
        status_btn = ctk.CTkButton(
            frame,
            text="‚úì" if task.status == "completed" else "‚óã",
            width=30,
            command=lambda: self.toggle_task_status(task)
        )
        status_btn.pack(side="left", padx=5)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        info_frame = ctk.CTkFrame(frame, fg_color="transparent")
        info_frame.pack(side="left", padx=5, fill="x", expand=True)

        title = ctk.CTkLabel(
            info_frame,
            text=task.title,
            fg_color=task.color if task.color else "transparent"
        )
        title.pack(anchor="w")

        if task.description:
            description = ctk.CTkLabel(
                info_frame,
                text=task.description,
                text_color=("gray60", "gray70")
            )
            description.pack(anchor="w")

        # AI –∞–Ω–∞–ª–∏–∑
        ai_btn = ctk.CTkButton(
            frame,
            text="ü§ñ",
            width=30,
            command=lambda: self.show_ai_recommendation(task)
        )
        ai_btn.pack(side="right", padx=2)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ctk.CTkButton(
            frame,
            text="‚Üë",
            width=30,
            command=lambda: self.change_priority(task, 1)
        ).pack(side="right", padx=2)

        ctk.CTkButton(
            frame,
            text="‚Üì",
            width=30,
            command=lambda: self.change_priority(task, -1)
        ).pack(side="right", padx=2)

        ctk.CTkButton(
            frame,
            text="‚úï",
            width=30,
            command=lambda: self.delete_task(task)
        ).pack(side="right", padx=2)

    def show_ai_recommendation(self, task):
        """–ü–æ–∫–∞–∑–∞—Ç—å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        recommendation = self.ai_service.analyze_task(task.title)

        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        popup = ctk.CTkToplevel(self)
        popup.title("AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        popup.geometry("400x300")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text = ctk.CTkTextbox(popup, wrap="word")
        text.pack(padx=20, pady=20, fill="both", expand=True)
        text.insert("1.0", recommendation)
        text.configure(state="disabled")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ctk.CTkButton(
            popup,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=popup.destroy
        ).pack(pady=10)

    def refresh_tasks(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        for widget in self.tasks_frame.winfo_children():
            widget.destroy()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user = self.controller.auth_service.get_current_user()
        if not current_user:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        search_query = self.search_entry.get() if hasattr(self, 'search_entry') else None
        sort_by = self.sort_var.get() if hasattr(self, 'sort_var') else "priority"
        sort_order = self.order_var.get() if hasattr(self, 'order_var') else "desc"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
        tasks = self.task_service.get_user_tasks(
            current_user.id,
            status=self.current_status,
            search_query=search_query,
            sort_by=sort_by,
            sort_order=sort_order
        )

        for task in tasks:
            self.create_task_widget(task)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.update_stats()

    def toggle_task_status(self, task):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        new_status = "completed" if task.status != "completed" else "new"
        self.task_service.update_task_status(task.id, new_status)
        self.refresh_tasks()

    def change_priority(self, task, delta):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
        new_priority = task.priority + delta
        if 0 <= new_priority <= 3:
            self.task_service.update_task_priority(task.id, new_priority)
            self.refresh_tasks()

    def delete_task(self, task):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        self.task_service.delete_task(task.id)
        self.refresh_tasks()

    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.refresh_tasks()