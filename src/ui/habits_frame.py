import customtkinter as ctk
from src.services.habit_service import HabitService
from src.services.ai_service import AIService
from src.patterns.observer import Observer

class HabitsFrame(ctk.CTkFrame, Observer):
    """
    –§—Ä–µ–π–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
    """
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.habit_service = HabitService()
        self.ai_service = AIService()

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.habit_service.notification_manager.attach(self)

        self.create_widgets()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(self, text="–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫", font=("Roboto", 24))
        title.pack(pady=20)

        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
        form_frame = ctk.CTkFrame(self)
        form_frame.pack(fill="x", padx=10, pady=5)

        self.habit_entry = ctk.CTkEntry(
            form_frame,
            placeholder_text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"
        )
        self.habit_entry.pack(side="left", fill="x", expand=True, padx=5)

        # –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
        self.frequency_var = ctk.StringVar(value="daily")
        frequency_menu = ctk.CTkOptionMenu(
            form_frame,
            values=["daily", "weekly", "monthly"],
            variable=self.frequency_var
        )
        frequency_menu.pack(side="left", padx=5)

        # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        self.time_entry = ctk.CTkEntry(
            form_frame,
            placeholder_text="–ß–ß:–ú–ú"
        )
        self.time_entry.pack(side="left", padx=5)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_button = ctk.CTkButton(
            form_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å",
            command=self.add_habit
        )
        add_button.pack(side="left", padx=5)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–∏ –¥–Ω—è
        idea_button = ctk.CTkButton(
            form_frame,
            text="–ò–¥–µ—è –¥–Ω—è",
            command=self.show_daily_idea
        )
        idea_button.pack(side="left", padx=5)

        # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
        self.habits_frame = ctk.CTkScrollableFrame(self)
        self.habits_frame.pack(fill="both", expand=True, padx=10, pady=5)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
        self.refresh_habits()

    def add_habit(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
        name = self.habit_entry.get()
        frequency = self.frequency_var.get()
        reminder_time = self.time_entry.get()

        if not name:
            return

        current_user = self.controller.auth_service.get_current_user()
        if not current_user:
            return

        self.habit_service.create_habit(
            user_id=current_user.id,
            name=name,
            frequency=frequency,
            reminder_time=reminder_time
        )

        self.habit_entry.delete(0, "end")
        self.time_entry.delete(0, "end")
        self.refresh_habits()

    def create_habit_widget(self, habit):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏"""
        frame = ctk.CTkFrame(self.habits_frame)
        frame.pack(fill="x", padx=5, pady=2)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
        name_label = ctk.CTkLabel(frame, text=habit.name)
        name_label.pack(side="left", padx=5)

        # –ß–∞—Å—Ç–æ—Ç–∞
        frequency_label = ctk.CTkLabel(
            frame,
            text=f"–ß–∞—Å—Ç–æ—Ç–∞: {habit.frequency}"
        )
        frequency_label.pack(side="left", padx=5)

        # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if habit.reminder_time:
            time_label = ctk.CTkLabel(
                frame,
                text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {habit.reminder_time}"
            )
            time_label.pack(side="left", padx=5)

        # –ö–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞
        ai_button = ctk.CTkButton(
            frame,
            text="ü§ñ",
            width=30,
            command=lambda: self.show_ai_recommendation(habit)
        )
        ai_button.pack(side="right", padx=5)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_button = ctk.CTkButton(
            frame,
            text="–£–¥–∞–ª–∏—Ç—å",
            command=lambda: self.delete_habit(habit.id)
        )
        delete_button.pack(side="right", padx=5)

    def show_ai_recommendation(self, habit):
        """–ü–æ–∫–∞–∑–∞—Ç—å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏"""
        recommendation = self.ai_service.suggest_habit_improvement(habit.name)

        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        popup = ctk.CTkToplevel(self)
        popup.title("AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        popup.geometry("400x300")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text = ctk.CTkTextbox(popup, wrap="word")
        text.pack(padx=20, pady=20, fill="both", expand=True)
        text.insert("1.0", recommendation)
        text.configure(state="disabled")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = ctk.CTkButton(
            popup,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=popup.destroy
        )
        close_button.pack(pady=10)

    def show_daily_idea(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–¥–µ—é –¥–Ω—è –æ—Ç AI"""
        idea = self.ai_service.generate_daily_idea()

        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        popup = ctk.CTkToplevel(self)
        popup.title("–ò–¥–µ—è –¥–Ω—è")
        popup.geometry("400x300")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–¥–µ–∏
        text = ctk.CTkTextbox(popup, wrap="word")
        text.pack(padx=20, pady=20, fill="both", expand=True)
        text.insert("1.0", idea)
        text.configure(state="disabled")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = ctk.CTkButton(
            popup,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=popup.destroy
        )
        close_button.pack(pady=10)

    def refresh_habits(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        for widget in self.habits_frame.winfo_children():
            widget.destroy()

        current_user = self.controller.auth_service.get_current_user()
        if not current_user:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫
        habits = self.habit_service.get_user_habits(current_user.id)
        for habit in habits:
            self.create_habit_widget(habit)

    def delete_habit(self, habit_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
        self.habit_service.delete_habit(habit_id)
        self.refresh_habits()

    def update(self, message: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Observer)
        """
        notification = ctk.CTkToplevel(self)
        notification.geometry("300x100")
        notification.title("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

        label = ctk.CTkLabel(notification, text=message)
        label.pack(pady=20)

        button = ctk.CTkButton(
            notification,
            text="OK",
            command=notification.destroy
        )
        button.pack()